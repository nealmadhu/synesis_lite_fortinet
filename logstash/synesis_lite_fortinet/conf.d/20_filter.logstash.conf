filter {
  # Initialize @metadata values used to control processing flow.
  mutate {
    id => "set_resolve_ip2host"
    add_field => {
      "[@metadata][resolve_ip2host]" => "${SYNLITE_FORTINET_RESOLVE_IP2HOST:false}"
      "[@metadata][syslog_msg_timestamp]" => "${SYNLITE_FORTINET_SYSLOG_MSG_TIMESTAMP:true}"
    }
  }

  # Syslog messages can come in various basic formats. Here we check for common patterns and extract the basic fields as well as the logged message.
  grok {
    patterns_dir => "${SYNLITE_FORTINET_GROK_PATTERNS_DIR:/etc/logstash/synesis_lite_fortinet/patterns}"
    match => {
      "message" => "%{KOIOSSYSLOGBASEPARSER}"
    }
  }
  if "_grokparsefailure" in [tags] {
    # Apply basic handling if message didn't match any expected syslog message format.
    mutate {
      add_field => {
        "[node][ipaddr]" => "%{host}"
        "[node][hostname]" => "%{host}"
        "[log][message]" => "%{message}"
        "[log][severity]" => "undetermined"
      }
    }
    
    if [@metadata][resolve_ip2host] == "true" {
      dns {
        id => "syslog_dns_node_name"
        reverse => [ "[node][hostname]" ]
        action => "replace"
        nameserver => "${SYNLITE_FORTINET_NAMESERVER:127.0.0.1}"
        #hit_cache_size => 4096
        #hit_cache_ttl => 900
        #failed_cache_size => 512
        #failed_cache_ttl => 900
      }
    }
  } else {
    # Decode syslog priority if available.
    if [syslog_pri] {
      syslog_pri { }
      mutate {
        add_field => { "[log][severity]" => "%{[syslog_severity]}" }
      }
      mutate {
        rename => {
          "[syslog_facility]" => "[syslog][facility]"
          "[syslog_facility_code]" => "[syslog][facility_code]"
          "[syslog_pri]" => "[syslog][pri]"
          "[syslog_severity]" => "[syslog][severity]"
          "[syslog_severity_code]" => "[syslog][severity_code]"
        }
      }
    } else {
      mutate {
        add_field => { "[log][severity]" => "undetermined" }
      }
    }

    # Resolve IP or hostname as needed.
    if [node][hostname] {
      if [@metadata][resolve_ip2host] == "true" {
        mutate {
          add_field => {
            "[node][ipaddr]" => "%{[node][hostname]}"
          }
        }
        dns {
          resolve => [ "[node][ipaddr]" ]
          action => "replace"
          nameserver => "${SYNLITE_FORTINET_NAMESERVER:127.0.0.1}"
          #hit_cache_size => 4096
          #hit_cache_ttl => 900
          #failed_cache_size => 512
          #failed_cache_ttl => 900
        }
      } else {
        mutate {
          add_field => {
            "[node][ipaddr]" => "%{host}"
          }
        }
      }
    } else if [node][ipaddr] {
      mutate {
        add_field => {
          "[node][hostname]" => "%{[node][ipaddr]}"
        }
      }
      if [@metadata][resolve_ip2host] == "true" {
        dns {
          reverse => [ "[node][hostname]" ]
          action => "replace"
          nameserver => "${SYNLITE_FORTINET_NAMESERVER:127.0.0.1}"
          #hit_cache_size => 4096
          #hit_cache_ttl => 900
          #failed_cache_size => 512
          #failed_cache_ttl => 900
        }
      }
    } else {
      mutate {
        add_field => {
          "[node][hostname]" => "%{host}"
          "[node][ipaddr]" => "%{host}"
          "[log][message]" => "%{message}"
        }
      }
    }

    # Set the date of the record to the timestamp from the syslog message.
    if [@metadata][syslog_timestamp] {
      date {
        locale => "en"
        match => [ "[@metadata][syslog_timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSSSSS", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
        timezone => "${SYNLITE_FORTINET_SYSLOG_TZ:UTC}"
        target => "[syslog][timestamp]"
      }
      if [@metadata][syslog_msg_timestamp] == "true" {
        date {
          locale => "en"
          match => [ "[@metadata][syslog_timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSSSSS", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
          timezone => "${SYNLITE_FORTINET_SYSLOG_TZ:UTC}"
        }
      }
    }

    # Check if it looks like key-value pairs.
    if [log][message] =~ /date=.+ time=.+ [A-Za-z0-9_]+=/ {
      # Parse the key-value pairs from the BMF payload, adding them as fields to the event.
      kv {
        source => "[log][message]"
        trim_value => "\""
        trim_key => "\""
      }

      # Normalize fields from different versions and message types.
      mutate {
        rename => {
          "devid" => "device_id"
          "logid" => "log_id"
        }
      }

      # Source and Destination IP address processing.
      if [dstip] or [srcip] {
        # Initialize traffic_locality to private. This maybe changed to public based on analysis of the source and destination IP addresses below.
        mutate {
          id => "traffic_locality-default"
          add_field => { "[traffic_locality]" => "private" }
        }

        if [dstip] {
          # Set dst_host.
          mutate {
            add_field => { "[dst_host]" => "%{[dstip]}" }
          }
          if [@metadata][resolve_ip2host] == "true" {
            dns {
              reverse => [ "[dst_host]" ]
              action => "replace"
              nameserver => "${SYNLITE_FORTINET_NAMESERVER:127.0.0.1}"
              #hit_cache_size => 4096
              #hit_cache_ttl => 900
              #failed_cache_size => 512
              #failed_cache_ttl => 900
            }
          }
          
          # Check if destination IP address is private.
          cidr {
            id => "cidr-dstip"
            address => [ "%{[dstip]}" ]
            network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
            add_field => { "[dst_locality]" => "private" }
          }
          # Check to see if dst_locality exists. If it doesn't the dstip didn't match a private address space and locality must be public.
          if ![dst_locality] {
            mutate {
              id => "dstip-public"
              add_field => { "[dst_locality]" => "public" }
              replace => { "[traffic_locality]" => "public" }
            }
            geoip {
              id => "geoip_dst-city"
              source => "[dstip]"
              database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-City.mmdb"
              target => "[geoip_dst]"
              fields => [ "city_name", "country_name", "location" ]
              remove_field => [ "[geoip_dst][ip]" ]
            }
            geoip {
              id => "geoip_dst-asn"
              source => "[dstip]"
              database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-ASN.mmdb"
              target => "[geoip_dst]"
              remove_field => [ "[geoip_dst][ip]" ]
            }
            # Populate geoip_dst.autonomous_system.
            if [geoip_dst][as_org] {
              if [geoip_dst][asn] {
                mutate {
                  id => "dst-as-from-as_org-asn"
                  add_field => { "[geoip_dst][autonomous_system]" => "%{[geoip_dst][as_org]} (%{[geoip_dst][asn]})" }
                }
              } else {
                mutate {
                  id => "dst-as-from-as_org"
                  add_field => { "[geoip_dst][autonomous_system]" => "%{[geoip_dst][as_org]}" }
                }
              }
            } else if [geoip_dst][asn] {
              mutate {
                id => "dst-as-from-asn"
                add_field => { "[geoip_dst][autonomous_system]" => "%{[geoip_dst][asn]}" }
              }
            }
          } else {
            mutate {
              id => "dst-as-private"
              add_field => { "[geoip_dst][autonomous_system]" => "PRIVATE" }
            }
          }
        }

        if [srcip] {
          # Set src_host.
          mutate {
            add_field => { "[src_host]" => "%{[srcip]}" }
          }
          if [@metadata][resolve_ip2host] == "true" {
            dns {
              reverse => [ "[src_host]" ]
              action => "replace"
              nameserver => "${SYNLITE_FORTINET_NAMESERVER:127.0.0.1}"
              #hit_cache_size => 4096
              #hit_cache_ttl => 900
              #failed_cache_size => 512
              #failed_cache_ttl => 900
            }
          }
          
          # Check if source IP address is private.
          cidr {
              id => "cidr-srcip"
              address => [ "%{[srcip]}" ]
              network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
              add_field => { "[src_locality]" => "private" }
          }
          # Check to see if src_locality exists. If it doesn't the srcip didn't match a private address space and locality must be public.
          if ![src_locality] {
            mutate {
              id => "srcip-public"
              add_field => { "[src_locality]" => "public" }
              replace => { "[traffic_locality]" => "public" }
            }
            geoip {
              id => "geoip_src-city"
              source => "[srcip]"
              database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-City.mmdb"
              target => "[geoip_src]"
              fields => [ "city_name", "country_name", "location" ]
              remove_field => [ "[geoip_src][ip]" ]
            }
            geoip {
              id => "geoip_src-asn"
              source => "[srcip]"
              database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-ASN.mmdb"
              target => "[geoip_src]"
              remove_field => [ "[geoip_src][ip]" ]
            }
            # Populate geoip_src.autonomous_system.
            if [geoip_src][as_org] {
              if [geoip_src][asn] {
                mutate {
                  id => "src-as-from-as_org-asn"
                  add_field => { "[geoip_src][autonomous_system]" => "%{[geoip_src][as_org]} (%{[geoip_src][asn]})" }
                }
              } else {
                mutate {
                  id => "src-as-from-as_org"
                  add_field => { "[geoip_src][autonomous_system]" => "%{[geoip_src][as_org]}" }
                }
              }
            } else if [geoip_src][asn] {
              mutate {
                id => "src-as-from-asn"
                add_field => { "[geoip_src][autonomous_system]" => "%{[geoip_src][asn]}" }
              }
            }
          } else {
            mutate {
              id => "src-as-private"
              add_field => { "[geoip_src][autonomous_system]" => "PRIVATE" }
            }
          }
        }

        # Lookup geolocation of external traffic. Source IP has priority over destination IP.
        if [src_locality] == "public" {
          geoip {
            id => "geoip-city-src"
            source => "[srcip]"
            database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-City.mmdb"
            fields => [ "city_name", "country_name", "location" ]
            remove_field => [ "[geoip][ip]" ]
          }
          geoip {
            id => "geoip-asn-src"
            source => "[srcip]"
            database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-ASN.mmdb"
            remove_field => [ "[geoip][ip]" ]
          }
        } else if [dst_locality] == "public" {
          geoip {
            id => "geoip-city-dst"
            source => "[dstip]"
            database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-City.mmdb"
            fields => [ "city_name", "country_name", "location" ]
            remove_field => [ "[geoip][ip]" ]
          }
          geoip {
            id => "geoip-asn-dst"
            source => "[dstip]"
            database => "${SYNLITE_FORTINET_GEOIP_DB_PATH:/etc/logstash/synesis_lite_fortinet/geoipdbs}/GeoLite2-ASN.mmdb"
            remove_field => [ "[geoip][ip]" ]
          }
        }
        # Populate geoip.autonomous_system.
        if [geoip][as_org] {
          if [geoip][asn] {
            mutate {
              id => "as-from-as_org-asn"
              add_field => { "[geoip][autonomous_system]" => "%{[geoip][as_org]} (%{[geoip][asn]})" }
            }
          } else {
            mutate {
              id => "as-from-as_org"
              add_field => { "[geoip][autonomous_system]" => "%{[geoip][as_org]}" }
            }
          }
        } else if [geoip][asn] {
          mutate {
            id => "as-from-asn"
            add_field => { "[geoip][autonomous_system]" => "%{[geoip][asn]}" }
          }
        }
      }

      if [proto] {
        # Replace protocol ID with well-known name.
        translate {
          id => "translate-proto_name"
          dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_protocol_numbers.yml"
          field => "proto"
          destination => "proto_name"
          fallback => "UNKNOWN"
        }
        
        # lookup IANA service name for source and destination ports.
        if [proto] == "6" { # TCP
          if [srcport] {
            translate {
              id => "translate-srcport_name_tcp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_tcp.yml"
              field => "[srcport]"
              destination => "[srcport_name]"
              fallback => "__UNKNOWN"
            }
          }
          if [dstport] {
            translate {
              id => "translate-dstport_name_tcp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_tcp.yml"
              field => "[dstport]"
              destination => "[dstport_name]"
              fallback => "__UNKNOWN"
            }
          }
        } else if [proto] == "17" { # UDP
          if [srcport] {
            translate {
              id => "translate-srcport_name_udp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_udp.yml"
              field => "[srcport]"
              destination => "[srcport_name]"
              fallback => "__UNKNOWN"
            }
          }
          if [dstport] {
            translate {
              id => "translate-dstport_name_udp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_udp.yml"
              field => "[dstport]"
              destination => "[dstport_name]"
              fallback => "__UNKNOWN"
            }
          }
        } else if [proto] == "132" { # SCTP
          if [srcport] {
            translate {
              id => "translate-srcport_name_sctp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_sctp.yml"
              field => "[srcport]"
              destination => "[srcport_name]"
              fallback => "__UNKNOWN"
            }
          }
          if [dstport] {
            translate {
              id => "translate-dstport_name_sctp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_sctp.yml"
              field => "[dstport]"
              destination => "[dstport_name]"
              fallback => "__UNKNOWN"
            }
          }
        } else if [proto] == "33" { # DCCP
          if [srcport] {
            translate {
              id => "translate-srcport_name_dccp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_dccp.yml"
              field => "[srcport]"
              destination => "[srcport_name]"
              fallback => "__UNKNOWN"
            }
          }
          if [dstport] {
            translate {
              id => "translate-dstport_name_dccp"
              dictionary_path => "${SYNLITE_FORTINET_DICTIONARY_PATH:/etc/logstash/synesis_lite_fortinet/dictionaries}/iana_service_names_dccp.yml"
              field => "[dstport]"
              destination => "[dstport_name]"
              fallback => "__UNKNOWN"
            }
          }
        } else if [proto] == "1" { # ICMP
          if ![srcport] {
            mutate {
              add_field => { "[srcport]" => "0" }
            }
          }
          if ![dstport] {
            mutate {
              add_field => { "[dstport]" => "0" }
            }
          }
          mutate {
            add_field => {
              "[srcport_name]" => "__UNKNOWN"
              "[dstport_name]" => "__UNKNOWN"
            }
          }
        } else {
          mutate {
            add_field => {
              "[srcport_name]" => "__UNKNOWN"
              "[dstport_name]" => "__UNKNOWN"
            }
          }
        }

        # Ensure port numbers are integers.
        mutate {
          id => "convert-ports-to-int"
          convert => {
            "[srcport]" => "integer"
            "[dstport]" => "integer"
          }
        }

        # Determine client and server from source and destination ports.
        if [dstport] and [srcport] {
          if [srcport_name] == "__UNKNOWN" {
            if [dstport_name] == "__UNKNOWN" {
              if [dstport] <= [srcport] {
                mutate {
                  id => "srcUn-dstUn-dstIsSrv"
                  add_field => { "[@metadata][isServer]" => "dst" }
                }
              } else {
                mutate {
                  id => "srcUn-dstUn-srcIsSrv"
                  add_field => { "[@metadata][isServer]" => "src" }
                }
              }
            } else {
              mutate {
                id => "srcUn-dstKn-dstIsSrv"
                add_field => { "[@metadata][isServer]" => "dst" }
              }
            }
          } else {
            if [dstport_name] == "__UNKNOWN" {
              mutate {
                id => "srcKn-dstUn-srcIsSrv"
                add_field => { "[@metadata][isServer]" => "src" }
              }
            } else {
              if [dstport] <= [srcport] {
                mutate {
                  id => "srcKn-dstKn-dstIsSrv"
                  add_field => { "[@metadata][isServer]" => "dst" }
                }
              } else {
                mutate {
                  id => "srcKn-dstKn-srcIsSrv"
                  add_field => { "[@metadata][isServer]" => "src" }
                }
              }
            }
          }
        }

        # Set final value of port name fields.
        if [srcport_name] {
          if [srcport_name] == "__UNKNOWN" {
            mutate {
              id => "srcport_name_unknown"
              replace => { "[srcport_name]" => "%{[proto_name]}/%{[srcport]}" }
            }
          } else {
            mutate {
              id => "srcport_name-prepend-srcport"
              replace => { "[srcport_name]" => "%{[proto_name]}/%{[srcport]} (%{[srcport_name]})" }
            }
          }
        }
        if [dstport_name] {
          if [dstport_name] == "__UNKNOWN" {
            mutate {
              id => "dstport_name_unknown"
              replace => { "[dstport_name]" => "%{[proto_name]}/%{[dstport]}" }
            }
          } else {
            mutate {
              id => "dest_port_name-prepend-dstport"
              replace => { "[dstport_name]" => "%{[proto_name]}/%{[dstport]} (%{[dstport_name]})" }
            }
          }
        }

        # Set client, server and service fields.
        if [dstip] and [srcip] {
          if [@metadata][isServer] == "dst" {
            mutate {
              id => "dstIsSrv-add-fields"
              add_field => {
                "[server_addr]" => "%{[dstip]}"
                "[server_host]" => "%{[dst_host]}"
                "[service_name]" => "%{[dstport_name]}"
                "[service_port]" => "%{[dstport]}"
                "[client_addr]" => "%{[srcip]}"
                "[client_host]" => "%{[src_host]}"
              }
            }
          } else if [@metadata][isServer] == "src" {
            mutate {
              id => "srcIsSrv-add-fields"
              add_field => {
                "[server_addr]" => "%{[srcip]}"
                "[server_host]" => "%{[src_host]}"
                "[service_name]" => "%{[srcport_name]}"
                "[service_port]" => "%{[srcport]}"
                "[client_addr]" => "%{[dstip]}"
                "[client_host]" => "%{[dst_host]}"
              }
            }
          }
        }
      }
    }
  }
}
